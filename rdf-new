{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5ee29fa9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-20T06:30:14.514018Z",
     "iopub.status.busy": "2024-12-20T06:30:14.513556Z",
     "iopub.status.idle": "2024-12-20T06:30:36.784777Z",
     "shell.execute_reply": "2024-12-20T06:30:36.783611Z"
    },
    "papermill": {
     "duration": 22.277667,
     "end_time": "2024-12-20T06:30:36.787252",
     "exception": false,
     "start_time": "2024-12-20T06:30:14.509585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy: 100.00%\n",
      "\n",
      "Distribution of predictions:\n",
      "sii\n",
      "0    12\n",
      "1     3\n",
      "2     5\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import warnings\n",
    "from sklearn.ensemble import HistGradientBoostingClassifier\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from imblearn.under_sampling import RandomUnderSampler\n",
    "from imblearn.pipeline import Pipeline as ImbPipeline\n",
    "from sklearn.metrics import make_scorer, cohen_kappa_score, accuracy_score\n",
    "\n",
    "# Tắt cảnh báo\n",
    "warnings.filterwarnings('ignore', category=FutureWarning)\n",
    "\n",
    "# Đọc dữ liệu\n",
    "train = pd.read_csv('/kaggle/input/child-mind-institute-problematic-internet-use/train.csv')\n",
    "test = pd.read_csv('/kaggle/input/child-mind-institute-problematic-internet-use/test.csv')\n",
    "\n",
    "# Loại bỏ các hàng có giá trị thiếu trong biến mục tiêu 'sii'\n",
    "train = train.dropna(subset=['sii'])\n",
    "\n",
    "# Chuyển đổi sang integer\n",
    "train['sii'] = train['sii'].astype(int)\n",
    "\n",
    "# Bỏ các đặc trưng có hơn 70% giá trị null \n",
    "threshold = 0.7 \n",
    "missing_values_ratio = train.isnull().mean()\n",
    "features_to_drop = missing_values_ratio[missing_values_ratio > threshold].index \n",
    "train = train.drop(columns=features_to_drop) \n",
    "test = test.drop(columns=features_to_drop)\n",
    "\n",
    "# Bỏ các cột sii, id và PCIAT\n",
    "X = train.drop(columns=['sii', 'id'] + [col for col in train.columns if 'PCIAT' in col])\n",
    "y = train['sii']\n",
    "\n",
    "# Xử lý ID trong tập test\n",
    "if 'id' in test.columns:\n",
    "    test_id = test['id']\n",
    "else:\n",
    "    test_id = pd.Series(np.arange(test.shape[0]), name='id')\n",
    "\n",
    "# Chỉ giữ lại các cột chung giữa train và test\n",
    "test = test[X.columns.intersection(test.columns)]\n",
    "if 'id' not in test.columns:\n",
    "    test['id'] = test_id\n",
    "\n",
    "# Xác định các loại cột\n",
    "numeric_features = X.select_dtypes(include=['int64', 'float64']).columns\n",
    "categorical_features = X.select_dtypes(include=['object']).columns\n",
    "\n",
    "# Tạo preprocessor với xử lý missing values riêng cho mỗi loại dữ liệu\n",
    "numeric_transformer = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='median'))\n",
    "])\n",
    "\n",
    "categorical_transformer = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n",
    "    ('encoder', OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1))\n",
    "])\n",
    "\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numeric_transformer, numeric_features),\n",
    "        ('cat', categorical_transformer, categorical_features)\n",
    "    ]\n",
    ")\n",
    "\n",
    "# Thiết lập tham số cho HistGradientBoostingClassifier\n",
    "model_params = {\n",
    "    'max_iter': 500,\n",
    "    'learning_rate': 0.1,\n",
    "    'max_depth': 40,\n",
    "    'min_samples_leaf': 20,\n",
    "    'l2_regularization': 1.0,\n",
    "    'random_state': 42\n",
    "}\n",
    "\n",
    "# Sử dụng ImbPipeline cho toàn bộ quá trình\n",
    "pipeline = ImbPipeline([\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('smote', SMOTE(sampling_strategy='auto', random_state=42)),\n",
    "    ('undersample', RandomUnderSampler(sampling_strategy='auto', random_state=42)),\n",
    "    ('classifier', HistGradientBoostingClassifier(**model_params))\n",
    "])\n",
    "\n",
    "# Thiết lập K-Fold Cross Validation\n",
    "kfold = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Tính toán QWK \n",
    "qwk_scorer = make_scorer(cohen_kappa_score, weights='quadratic')\n",
    "\n",
    "# Huấn luyện mô hình\n",
    "pipeline.fit(X, y)\n",
    "\n",
    "# Dự đoán trên tập huấn luyện\n",
    "train_predictions = pipeline.predict(X)\n",
    "\n",
    "# Hiển thị độ chính xác trên tập huấn luyện \n",
    "train_accuracy = accuracy_score(y, train_predictions)\n",
    "print(f\"Training Accuracy: {train_accuracy * 100:.2f}%\")\n",
    "\n",
    "# Chuẩn bị dữ liệu test\n",
    "test_X = test.drop(columns=['id'] + [col for col in test.columns if 'PCIAT' in col])\n",
    "\n",
    "# Dự đoán trên tập dữ liệu test\n",
    "test_predictions = pipeline.predict(test_X)\n",
    "\n",
    "# Tạo tệp submission\n",
    "submission = pd.DataFrame({\n",
    "    'id': test['id'],\n",
    "    'sii': test_predictions\n",
    "})\n",
    "\n",
    "submission.to_csv('submission.csv', index=False)\n",
    "print(\"\\nDistribution of predictions:\")\n",
    "print(submission['sii'].value_counts().sort_index())"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 9643020,
     "sourceId": 81933,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30804,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 26.314013,
   "end_time": "2024-12-20T06:30:37.408626",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-20T06:30:11.094613",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
