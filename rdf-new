{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":81933,"databundleVersionId":9643020,"sourceType":"competition"}],"dockerImageVersionId":30804,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Random Forest V4\n\n## Nhận thấy label sii đang mất cân bằng => thí nghiệm\n\n* Undersampling lớp đa số\n  - Total training time for Random Search: 177.11 seconds\n  - Best cross-validation score: 0.5982519757713485\n* SMOTE (Synthetic Minority Over-sampling Technique)\n  - Total training time for Random Search: 193.97 seconds.\n  - Best cross-validation score: 0.599310973805571111\n* Kết hợp: **SMOTE + Undersampling**\n  - Total training time for Random Search: 5211.87 seconds\n  - Best cross-validation score: 0.6863085128766317\n  - **Submission: 0.362**\n## Nhận xét: So với phiên bản RD base vẫn chưa hiệu quả tốt nên thử phương pháp:\n* Không sử dụng SimpleImputer cho sii nữa thay vào đó là drop hẳn luôn (vẫn sử dụng kết hợp SMOTE và Undersampling)\n  - Total training time for Random Search: 2478.36 seconds\n  - Best cross-validation score:0.5784170354537939\n  - **Submission: 0.378**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport warnings\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV, KFold , RandomizedSearchCV\nfrom sklearn.preprocessing import OrdinalEncoder, StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom scipy.stats import randint, uniform\nimport time\nfrom skopt import BayesSearchCV\nfrom skopt.space import Real, Categorical, Integer\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline as ImbPipeline  # Pipeline từ imbalanced-learn\n\n\n# Tắt cảnh báo\nwarnings.filterwarnings('ignore', category=FutureWarning)\n\n# Đọc dữ liệu\ntrain = pd.read_csv('/kaggle/input/child-mind-institute-problematic-internet-use/train.csv')\ntest = pd.read_csv('/kaggle/input/child-mind-institute-problematic-internet-use/test.csv')\n\n#Sử dụng SimpleImputer cho cột 'sii' \n# sii_imputer = SimpleImputer(strategy='median')\n# train['sii'] = sii_imputer.fit_transform(train[['sii']])\n\n# Loại bỏ các hàng có giá trị thiếu trong biến mục tiêu 'sii'\ntrain = train.dropna(subset=['sii'])\n\n# Chuyển đổi sang integer\ntrain['sii'] = train['sii'].astype(int)\n\n# Bỏ các cột sii, id và cả PCIAT_PCIAT_*\nX = train.drop(columns=['sii', 'id'] + [col for col in train.columns if 'PCIAT' in col])\ny = train['sii']\n\n# Xác định các loại cột\nnumeric_features = X.select_dtypes(include=['int64', 'float64']).columns\ncategorical_features = X.select_dtypes(include=['object']).columns\n\n# Tạo preprocessor - Xử lý missing value\npreprocessor = ColumnTransformer(\n    transformers=[\n\n        # Với dữ liệu loại số: Lấy giá trị trung bình của các row lân cận\n        ('num', Pipeline([\n            ('imputer', SimpleImputer(strategy='median')),\n            ('scaler', StandardScaler())\n        ]), numeric_features),\n\n        # Với dữ liệu loại categorical: Lấy theo tần số xuất hiện nhiều nhất và encode có thành số ví dụ 0,1,...\n        ('cat', Pipeline([\n            ('imputer', SimpleImputer(strategy='most_frequent')),\n            ('encoder', OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1))\n        ]), categorical_features)\n    ])\n\n# Kết hợp SMOTE và Undersampling trong pipeline\npipeline = ImbPipeline([\n    ('preprocessor', preprocessor),      \n    ('smote', SMOTE(sampling_strategy='auto', random_state=42)),  # Tăng cường lớp thiểu số\n    ('undersample', RandomUnderSampler(sampling_strategy='auto', random_state=42)),  # Giảm lớp đa số\n    ('classifier', RandomForestClassifier( n_estimators=200, class_weight='balanced', random_state=42))\n])\n\n# Định nghĩa Bayesian search space\nsearch_spaces = {\n    'classifier__n_estimators': Integer(50, 500),\n    'classifier__max_depth': Categorical([None] + list(range(10, 50, 5))),\n    'classifier__min_samples_split': Integer(2, 20),\n    'classifier__min_samples_leaf': Integer(1, 10),\n    'classifier__max_features': Categorical(['sqrt', 'log2', None]),\n    'classifier__criterion': Categorical(['gini', 'entropy']),\n    'classifier__bootstrap': Categorical([True, False])\n}\n\n# Thiết lập K-Fold Cross Validation\nkfold = KFold(n_splits=5, shuffle=True, random_state=42)\n\nstart_time = time.time()\n\n# Thực hiện Bayesian Search\nbayes_search = BayesSearchCV(\n    estimator=pipeline,\n    search_spaces=search_spaces,\n    n_iter=50,  # Số lượng cấu hình để thử\n    cv=kfold,\n    n_jobs=-1,\n    verbose=0,\n    scoring='f1_weighted'\n)\n\nbayes_search.fit(X, y)\n\nend_time = time.time()\n#In ra tổng thời gian tìm parameter phù hợp\nprint(f\"Total training time for Random Search: {end_time - start_time:.2f} seconds\")\n\nprint(\"\\nBest parameters:\", bayes_search.best_params_)\nprint(\"Best cross-validation score:\", bayes_search.best_score_)\n\n# Lấy mô hình tốt nhất từ Random Search\nfinal_model = bayes_search.best_estimator_\n\n# HUẤN LUYỆN LẠI TRÊN TOÀN BỘ TẬP DỮ LIỆU\nfinal_model.fit(X, y)\n\n# Chuẩn bị dữ liệu test\ntest_X = test.drop(columns=['id'] + [col for col in test.columns if 'PCIAT' in col])\n\n# Dự đoán trên tập dữ liệu test\ntest_predictions = final_model.predict(test_X)\n\n# Tạo tệp submission\nsubmission = pd.DataFrame({\n    'id': test['id'],\n    'sii': test_predictions\n})\n\n# submission.to_csv('submission.csv', index=False)\nsubmission\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-18T02:55:52.500753Z","iopub.execute_input":"2024-12-18T02:55:52.501240Z","iopub.status.idle":"2024-12-18T03:43:04.524980Z","shell.execute_reply.started":"2024-12-18T02:55:52.501202Z","shell.execute_reply":"2024-12-18T03:43:04.523720Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/skopt/optimizer/optimizer.py:517: UserWarning: The objective has been evaluated at point [True, 'gini', 20, 'log2', 1, 2, 500] before, using random point [True, 'gini', 15, 'log2', 2, 12, 246]\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/skopt/optimizer/optimizer.py:517: UserWarning: The objective has been evaluated at point [True, 'gini', 15, 'sqrt', 1, 2, 500] before, using random point [False, 'gini', 25, 'log2', 2, 4, 110]\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/skopt/optimizer/optimizer.py:517: UserWarning: The objective has been evaluated at point [True, 'gini', 15, 'sqrt', 1, 2, 500] before, using random point [False, 'entropy', 20, None, 6, 14, 365]\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/skopt/optimizer/optimizer.py:517: UserWarning: The objective has been evaluated at point [False, 'gini', 15, 'sqrt', 1, 2, 500] before, using random point [False, 'entropy', 10, 'sqrt', 8, 5, 127]\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/skopt/optimizer/optimizer.py:517: UserWarning: The objective has been evaluated at point [False, 'gini', 20, 'sqrt', 1, 2, 500] before, using random point [False, 'entropy', 20, 'sqrt', 9, 14, 176]\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/skopt/optimizer/optimizer.py:517: UserWarning: The objective has been evaluated at point [False, 'gini', 20, 'sqrt', 1, 2, 500] before, using random point [True, 'entropy', 20, None, 3, 5, 413]\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Total training time for Random Search: 2812.68 seconds\n\nBest parameters: OrderedDict([('classifier__bootstrap', True), ('classifier__criterion', 'entropy'), ('classifier__max_depth', 35), ('classifier__max_features', 'sqrt'), ('classifier__min_samples_leaf', 1), ('classifier__min_samples_split', 5), ('classifier__n_estimators', 486)])\nBest cross-validation score: 0.574537502023768\n","output_type":"stream"},{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"          id  sii\n0   00008ff9    2\n1   000fd460    0\n2   00105258    0\n3   00115b9f    1\n4   0016bb22    2\n5   001f3379    1\n6   0038ba98    0\n7   0068a485    1\n8   0069fbed    2\n9   0083e397    2\n10  0087dd65    2\n11  00abe655    0\n12  00ae59c9    1\n13  00af6387    2\n14  00bd4359    2\n15  00c0cd71    2\n16  00d56d4b    0\n17  00d9913d    0\n18  00e6167c    0\n19  00ebc35d    2","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>sii</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>00008ff9</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>000fd460</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>00105258</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>00115b9f</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0016bb22</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>001f3379</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0038ba98</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0068a485</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0069fbed</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0083e397</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0087dd65</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>00abe655</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>00ae59c9</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>00af6387</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>00bd4359</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>00c0cd71</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>00d56d4b</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>00d9913d</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>00e6167c</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>00ebc35d</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4}]}